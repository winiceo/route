{"version":3,"sources":["../../../app/controller/account.js"],"names":["_","require","validator","utility","uuid","module","exports","AccountController","ctx","service","config","email","trim","request","body","toLowerCase","password","captcha","String","console","log","ret","status","message","data","msg","some","item","isEmail","length","account","getUserByMail","accounts","passhash","helper","bhash","newAndSave","result","getUser","indexOf","existUser","equal","bcompare","token","app","jwt","sign","user_id","id","secret","user","updateUser","rs","old_password","Controller"],"mappings":"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","file":"account.js","sourcesContent":["\nconst _ = require('lodash');\nconst validator = require('validator');\nconst utility = require('utility');\nconst uuid = require('uuid');\n\nmodule.exports = app => {\n    class AccountController extends app.Controller {\n\n        async register() {\n            const { ctx, service, config } = this;\n\n\n            const email = validator.trim(ctx.request.body.email || '').toLowerCase();\n            const password = validator.trim(ctx.request.body.password || '');\n            const captcha = validator.trim(String(ctx.request.body.captcha) || '');\n\n            console.log(ctx.request.body);\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            let msg = null;\n            // 验证信息的正确性\n            if ([email, password, captcha].some(item => {\n                return item === '';\n            })) {\n                msg = '信息不完整。';\n            } else if (!validator.isEmail(email)) {\n                msg = '邮箱不合法。';\n            } else if (password.length < 6) {\n                msg = '密码不能小于5。';\n            }\n            // END 验证信息的正确性\n\n            if (msg != null) {\n                ctx.status = 422;\n                ret.message = msg;\n                ctx.body = ret;\n                return;\n            }\n            // todo 验证码校验\n\n\n            const accounts = await service.account.getUserByMail(email);\n\n\n            if (accounts) {\n                ctx.status = 422;\n                ret.message = '用户名或邮箱已被使用。';\n                ctx.body = ret;\n                return;\n            }\n\n            const passhash = ctx.helper.bhash(password);\n\n\n            let result = await service.account.newAndSave(email, passhash, false);\n\n            console.log(result);\n            // 发送激活邮件\n           // await service.mail.sendActiveMail(email, utility.md5(email + passhash + config.session_secret));\n            ret.status = 200;\n            ctx.body = ret;\n        }\n\n\n        async login() {\n            const { ctx, service, config } = this;\n\n\n            const email = validator.trim(ctx.request.body.email || '').toLowerCase();\n            const password = validator.trim(ctx.request.body.password || '');\n            // const captcha = validator.trim(String(ctx.request.body.captcha) || '');\n\n            console.log(ctx.request.body);\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            let msg = null;\n            // 验证信息的正确性\n            if ([email, password].some(item => {\n                return item === '';\n            })) {\n                msg = '信息不完整。';\n            } else if (!validator.isEmail(email)) {\n                msg = '邮箱不合法。';\n            } else if (password.length < 6) {\n                msg = '密码不能小于6。';\n            }\n\n            const getUser = email => {\n                if (email.indexOf('@') > 0) {\n                    return ctx.service.account.getUserByMail(email);\n                }\n                return false;\n            };\n            const existUser = await getUser(email);\n\n            // 用户不存在\n            if (!existUser) {\n                ctx.status = 422;\n                ret.message = '用户不存在';\n                ctx.body = ret;\n                return;\n            }\n\n            const passhash = existUser.password;\n            // TODO: change to async compare\n            const equal = ctx.helper.bcompare(password, passhash);\n            // 密码不匹配\n            if (!equal) {\n                ctx.status = 422;\n                ret.message = '密码不正确';\n                ctx.body = ret;\n                return;\n            }\n\n            const token = app.jwt.sign({ email: existUser.email, user_id: existUser.id }, app.config.jwt.secret);\n\n\n            ret.status = 200;\n            ret.data.token = token;\n            ctx.body = ret;\n        }\n\n\n        async test() {\n            const { ctx } = this;\n\n            console.log(ctx.account);\n\n            this.ctx.body = ctx.user;\n        }\n\n\n\n        async forget() {\n            const { ctx, service } = this;\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            const email = validator.trim(ctx.request.body.email).toLowerCase();\n            const password = validator.trim(ctx.request.body.password) || '';\n\n            if (!validator.isEmail(email)) {\n\n                ret.message = '邮箱不合法';\n                ctx.body = ret;\n                return;\n            }\n\n            const user = await service.account.getUserByMail(email);\n            if (!user) {\n                ret.message = '邮箱不存在';\n                ctx.body = ret;\n                return;\n\n            }\n\n            const passhash = ctx.helper.bhash(password);\n            user.password = passhash;\n            const rs = await service.account.updateUser(user);\n            console.log(rs)\n            ctx.status = 200;\n            ret.status = 200;\n            ctx.body = ret;\n\n        }\n        // 修改密码\n        async updatePass() {\n            const { ctx, service } = this;\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            const old_password = validator.trim(ctx.request.body.old_password) || '';\n            const password = validator.trim(ctx.request.body.password) || '';\n\n            const user = await service.account.getUserByMail(ctx.account.email);\n\n            if (!user) {\n                ret.message = '用户不存在';\n                ctx.body = ret;\n                return;\n\n            }\n\n            const equal = ctx.helper.bcompare(old_password, user.password);\n            // 密码不匹配\n            if (!equal) {\n                ctx.status = 422;\n                ret.message = '旧密码不正确';\n                ctx.body = ret;\n                return;\n            }\n\n            const passhash = ctx.helper.bhash(password);\n            user.password = passhash;\n            const rs = await service.account.updateUser(user);\n            console.log(rs);\n            ctx.status = 200;\n            ret.status = 200;\n            ctx.body = ret;\n        }\n\n    }\n\n    return AccountController;\n};"]}