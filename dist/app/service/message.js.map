{"version":3,"sources":["../../../app/service/message.js"],"names":["Service","require","MessageService","id","ctx","model","Message","count","master_id","has_read","exec","message","type","Promise","all","service","user","getUserById","author_id","topic","getTopicById","topic_id","reply","getReplyById","reply_id","author","is_invalid","findOne","_id","getMessageRelations","userId","query","find","sort","limit","messages","length","ids","map","m","$in","update","$set","opts","multi","msgId","authorId","topicId","replyId","save","module","exports"],"mappings":"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","file":"message.js","sourcesContent":["\nconst Service = require('egg').Service;\n\n/*\n * type:\n * reply: xx 回复了你的话题\n * reply2: xx 在话题中回复了你\n * follow: xx 关注了你\n * at: xx ＠了你\n */\n\nclass MessageService extends Service {\n    /*\n   * 根据用户ID，获取未读消息的数量\n   * Callback:\n   * @param {String} id 用户ID\n   * @return {Promise[messagesCount]} 承载消息列表的 Promise 对象\n   */\n    getMessagesCount(id) {\n        return this.ctx.model.Message.count({\n            master_id: id,\n            has_read: false\n        }).exec();\n    }\n\n    async getMessageRelations(message) {\n        if (\n            message.type === 'reply' ||\n      message.type === 'reply2' ||\n      message.type === 'at'\n        ) {\n            const [author, topic, reply] = await Promise.all([\n                this.service.user.getUserById(message.author_id),\n                this.service.topic.getTopicById(message.topic_id),\n                this.service.reply.getReplyById(message.reply_id)\n            ]);\n\n            message.author = author;\n            message.topic = topic;\n            message.reply = reply;\n\n            if (!author || !topic) {\n                message.is_invalid = true;\n            }\n\n            return message;\n        }\n\n        return { is_invalid: true };\n    }\n\n    /*\n   * 根据消息Id获取消息\n   * @param {String} id 消息ID\n   * @return {Promise[message]} 承载消息的 Promise 对象\n   */\n    async getMessageById(id) {\n        const message = await this.ctx.model.Message.findOne({ _id: id }).exec();\n        return this.getMessageRelations(message);\n    }\n\n    /*\n   * 根据用户ID，获取已读消息列表\n   * @param {String} userId 用户ID\n   * @return {Promise[messages]} 承载消息列表的 Promise 对象\n   */\n    getReadMessagesByUserId(userId) {\n        const query = { master_id: userId, has_read: true };\n        return this.ctx.model.Message.find(query, null, {\n            sort: '-create_at',\n            limit: 20\n        }).exec();\n    }\n\n    /*\n   * 根据用户ID，获取未读消息列表\n   * @param {String} userId 用户ID\n   * @return {Promise[messages]} 承载消息列表的 Promise 对象\n   */\n    getUnreadMessagesByUserId(userId) {\n        const query = { master_id: userId, has_read: false };\n        return this.ctx.model.Message.find(query, null, {\n            sort: '-create_at'\n        }).exec();\n    }\n\n    /*\n   * 将消息设置成已读\n   * @return {Promise[messages]} 承载消息列表的 Promise 对象\n   */\n    async updateMessagesToRead(userId, messages) {\n        if (messages.length === 0) {\n            return;\n        }\n\n        const ids = messages.map(function(m) {\n            return m.id;\n        });\n\n        const query = { master_id: userId, _id: { $in: ids }};\n        const update = { $set: { has_read: true }};\n        const opts = { multi: true };\n        return this.ctx.model.Message.update(query, update, opts).exec();\n    }\n\n    /**\n   * 将单个消息设置成已读\n   * @param {String} msgId 消息 ID\n   * @return {Promise} 更新消息返回的 Promise 对象\n   */\n    async updateOneMessageToRead(msgId) {\n        if (!msgId) {\n            return;\n        }\n        const query = { _id: msgId };\n        const update = { $set: { has_read: true }};\n        return this.ctx.model.Message.update(query, update, { multi: true }).exec();\n    }\n\n    async sendAtMessage(userId, authorId, topicId, replyId) {\n        const message = this.ctx.model.Message();\n\n        message.type = 'at';\n        message.master_id = userId;\n        message.author_id = authorId;\n        message.topic_id = topicId;\n        message.reply_id = replyId;\n\n        return message.save();\n    }\n\n    async sendReplyMessage(userId, authorId, topicId, replyId) {\n        const message = this.ctx.model.Message();\n\n        message.type = 'reply';\n        message.master_id = userId;\n        message.author_id = authorId;\n        message.topic_id = topicId;\n        message.reply_id = replyId;\n\n        return message.save();\n    }\n}\n\nmodule.exports = MessageService;\n"]}