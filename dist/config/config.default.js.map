{"version":3,"sources":["../../config/config.default.js"],"names":["path","require","module","exports","config","name","debug","keys","appInfo","host","session_secret","middleware","authUser","allow_sign_up","site_static_host","process","env","EGG_SITE_STATIC_HOST","mini_assets","EGG_MINI_ASSETS","upload","join","__dirname","auth_cookie_name","admins","siteFile","static","prefix","dynamic","preload","maxAge","dir","baseDir","redis","EGG_REDIS_HOST","EGG_REDIS_PORT","EGG_REDIS_PASSWORD","EGG_REDIS_DB","mongoose","EGG_MONGODB_URL","passportGithub","EGG_PASSPORT_GITHUB_CLIENT_ID","EGG_PASSPORT_GITHUB_CLIENT_SECRET","passportLocal","mail_opts","mail_grid_opts","auth","api_user","api_key","logger","alinode","EGG_ALINODE_APPID","EGG_ALINODE_SECRET","topic","list_topic_count","create_user_per_ip","search","security","csrf","enable","mysql","jwt","secret","option","expiresIn","view","root","ext","cache","defaultExt","mapping","onerror","all","err","ctx","body","status","message","html","json","jsonp"],"mappings":"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","file":"config.default.js","sourcesContent":["\nconst path = require('path');\n\nmodule.exports = appInfo => {\n\n    const config = {};\n\n    config.name = 'BeeRoute Api';\n    // debug 为 true 时，用于本地调试\n    config.debug = false;\n\n    // use for cookie sign key, should change to your own and keep security\n    config.keys = appInfo.name + '_1519887194138_3450';\n\n    config.host = '';\n\n    config.session_secret = 'beelet_secret'; // 务必修改\n\n    // add your config here\n    config.middleware = ['errorPage'];\n\n    config.authUser = {\n        'enable': true,\n        'match': '/'\n    };\n\n    // 是否允许直接注册（否则只能走 github 的方式）\n    config.allow_sign_up = true;\n\n    // cdn host，如 http://cnodejs.qiniudn.com\n    config.site_static_host = process.env.EGG_SITE_STATIC_HOST || ''; // 静态文件存储域名\n\n    config.mini_assets = process.env.EGG_MINI_ASSETS || false;\n\n\n    // 文件上传配置\n    // 注：如果填写 qn_access，则会上传到 7牛，以下配置无效\n    config.upload = {\n        'path': path.join(__dirname, '../app/public/upload/'),\n        'url': '/public/upload/'\n    };\n\n\n\n    config.auth_cookie_name = 'bee_route';\n    config.admins = {\n        'ADMIN_USER': true\n    };\n\n    config.siteFile = {\n        '/favicon.ico': '/public/images/cnode_icon_32.png'\n    };\n\n    config.static = {\n        prefix: '/docs',\n        dynamic: true,\n        preload: false,\n        maxAge: 31536000,\n        dir: path.join(appInfo.baseDir, 'public/')\n    };\n\n\n    // database\n    config.redis = {\n        'client': {\n            'host': process.env.EGG_REDIS_HOST || '127.0.0.1',\n            'port': process.env.EGG_REDIS_PORT || 6379,\n            'password': process.env.EGG_REDIS_PASSWORD || '',\n            'db': process.env.EGG_REDIS_DB || '0'\n        }\n    };\n\n    /**\n     * @see http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html#createCollection\n     */\n    config.mongoose = {\n        'url': process.env.EGG_MONGODB_URL || 'mongodb://127.0.0.1:27017/egg_cnode',\n        'options': {\n            'server': { 'poolSize': 20 }\n        }\n    };\n\n    // passport\n    config.passportGithub = {\n        'key': process.env.EGG_PASSPORT_GITHUB_CLIENT_ID || 'test',\n        'secret': process.env.EGG_PASSPORT_GITHUB_CLIENT_SECRET || 'test'\n    };\n\n    config.passportLocal = {\n        'usernameField': 'name',\n        'passwordField': 'pass'\n    };\n\n    // 邮箱配置\n    config.mail_opts = {\n        'host': 'smtp.sendgrid.net',\n        'port': 25,\n        'auth': {\n            'user': 'koinotice@gmail.com',\n            'pass': 'T861pW7vp_qp7w.izWe4Eh4Hqoa4Y9fVG'\n        },\n        'ignoreTLS': true\n    };\n    config.mail_grid_opts = {\n        auth: {\n            api_user: 'apikey',\n            api_key: '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'\n        }\n    };\n\n    config.logger = {\n        dir: '/pmkoo/logs'\n    };\n\n\n    config.alinode = {\n        // 从 `Node.js 性能平台` 获取对应的接入参数\n        'appid': process.env.EGG_ALINODE_APPID || '13173',\n        'secret': process.env.EGG_ALINODE_SECRET || '83cd543a57e7639aa623784a02a37acd5fb00a9f'\n    };\n\n    config.topic = {\n        'perDayPerUserLimitCount': 10\n    };\n\n    config.list_topic_count = 20;\n\n    // 每个 IP 每天可创建用户数\n    config.create_user_per_ip = 1000;\n\n    config.search = 'google'; // 'google', 'baidu', 'local'\n\n    config.security = {\n        csrf: {\n            enable: false\n        }\n    };\n    // config/config.${env}.js\n    config.mysql = {\n        // 单数据库信息配置\n        'client': {\n            // host\n            'host': '114.115.151.10',\n            // 端口号\n            'port': '3306',\n            // 用户名\n            'user': 'pmker',\n            // 密码\n            'password': 'Pmker.com',\n            // 数据库名\n            'database': 'route'\n        },\n        // 是否加载到 app 上，默认开启\n        'app': true,\n        // 是否加载到 agent 上，默认关闭\n        'agent': false\n    };\n\n\n\n    config.jwt = {\n        secret: 'DwNgD85L2Rc9',\n        option: {\n            expiresIn: '360d'\n        }\n    };\n    config.view = {\n        root: path.join(appInfo.baseDir, 'app/view'),\n        ext: 'html',\n        cache: true,\n        defaultExt: '.html',\n        mapping: {\n            '.ejs': 'ejs',\n            '.nj': 'nunjucks',\n            '.html': 'nunjucks'\n        }\n    };\n\n    config.onerror = {\n        all(err, ctx) {\n            // 在此处定义针对所有响应类型的错误处理方法\n            // 注意，定义了 config.all 之后，其他错误处理方法不会再生效\n            ctx.body = { status: 500, message: 'error' };\n            ctx.status = 500;\n        },\n        html(err, ctx) {\n            // html hander\n            ctx.body = { status: 500, message: 'error' };\n            ctx.status = 500;\n        },\n        json(err, ctx) {\n            // json hander\n            ctx.body = { status: 500, message: 'error' };\n            ctx.status = 500;\n        },\n        jsonp(err, ctx) {\n            // 一般来说，不需要特殊针对 jsonp 进行错误定义，jsonp 的错误处理会自动调用 json 错误处理，并包装成 jsonp 的响应格式\n        }\n    };\n\n    return config;\n};\n"]}