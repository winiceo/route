{"version":3,"sources":["../flightplan.js"],"names":["join","require","plan","pkg","config","application","name","deployTo","prodPath","repoUrl","repository","url","branch","keepReleases","releaseTimestamp","Date","getTime","toString","releasesPath","sharedPath","repoPath","currentPath","deploymentLogPath","releasePath","linkedDirs","revision","deploy","check","transport","log","exec","silent","length","dirs","map","dir","failsafe","code","with","createRelease","forEach","target","source","fetchReleaseSha","stdout","trim","_context","publish","cleanup","fetchReleases","releases","split","slice","sshFix","host","local","runtime","hosts","endpoint","transfer","hostInfo","localFile","remoteFile","username","prodHost","remote","pty"],"mappings":"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","file":"flightplan.js","sourcesContent":["\nconst join                = require('path').join;\nconst plan                = require('flightplan');\nconst pkg = require('./package.json');\nconst config = require('./deploy.config.js');\nconst application       = pkg.name;\nconst deployTo          = join(config.prodPath, application);\nconst repoUrl           = pkg.repository.url;\nconst branch            = 'master';\nconst keepReleases      = 3;\nconst releaseTimestamp  = new Date().getTime().toString();\nconst releasesPath      = join(deployTo, 'releases');\nconst sharedPath        = join(deployTo, 'shared');\nconst repoPath          = join(deployTo, 'repo');\nconst currentPath       = join(deployTo, 'current');\nconst deploymentLogPath = join(deployTo, 'deployments.log');\nconst releasePath       = join(releasesPath, releaseTimestamp);\nconst linkedDirs        = ['node_modules'];\n\nlet revision            = null;\n\n\n\nlet deploy = {\n    check: (transport) => {\n        transport.log('Checking environment...');\n\n        // 1) Check git is installed\n        transport.exec('which git', { silent: true });\n\n        // 2) Check remote repo exists\n        transport.exec(`git ls-remote --heads ${repoUrl}`, { silent: true });\n\n        // // 3) Check releases and shared directories exist\n        transport.exec(`mkdir -p ${releasesPath} ${sharedPath}`);\n\n        // 4) Check shared directories exist\n        if (linkedDirs.length) {\n            let dirs = linkedDirs.map(dir => join(sharedPath, dir)).join();\n            transport.exec(`mkdir -p ${dirs}`);\n        }\n\n        // 5) Check we have a repo\n        if (transport.exec(`[ -f ${join(repoPath, 'HEAD')} ]`, { failsafe: true, silent: true }).code === 0) {\n            // Yes: Update\n            transport.with(`cd ${repoPath}`, () => {\n                transport.exec('git remote update', { silent: true });\n            });\n        } else {\n            // No: Clone\n            transport.exec(`git clone --mirror ${repoUrl} ${repoPath}`);\n        }\n\n        // 6) Check we have write permissions\n        // @todo\n    },\n    createRelease: (transport) => {\n        // Create the release\n        transport.log('Create release...');\n\n        // 1) Create release folder\n        transport.exec(`mkdir -p ${releasePath}`);\n\n        // 2) Bundle repo, copy to release and uncompress contents\n        transport.exec(`git -C ${repoPath} archive ${branch} | tar -x -f - -C ${releasePath}`);\n\n        // 3) Create symlinked directories\n        if (linkedDirs.length) {\n            let dirs = linkedDirs.map(dir => join(releasePath, dir)).join();\n            transport.exec(`mkdir -p ${dirs}`);\n\n            linkedDirs.forEach(dir => {\n                let target = join(releasePath, dir);\n                let source = join(sharedPath, dir);\n                if (transport.exec(`[ -d ${target} ]`, { failsafe: true, silent: true }).code === 0) {\n                    transport.exec(`rm -rf ${target}`);\n                }\n                transport.exec(`ln -s ${source} ${target}`);\n            });\n        }\n\n        // 4) Fetch revision number\n        transport.with(`cd ${repoPath}`, () => {\n            let fetchReleaseSha = transport.exec(`git rev-list --max-count=1 --abbrev-commit --abbrev=12 ${branch}`, { silent: true });\n\n            if (fetchReleaseSha.code === 0) {\n                revision = fetchReleaseSha.stdout.trim();\n            }\n        });\n\n        // 5) Run npm install and build\n        transport.with(`cd ${releasePath}; export NODE_ENV=${transport._context.target}`, () => {\n            // transport.exec(`npm install --production`, { silent: true })\n            transport.exec('yarn install --production', { silent: true });\n            // 暂时没用上，去掉\n            // transport.exec(`npm run build`, { silent: true })\n        });\n    },\n    publish: (transport) => {\n        transport.log('Publishing release...');\n\n        // 1) Update current symlink to new release\n        transport.exec(`ln -sfn ${releasePath} ${currentPath}`);\n\n        // 2) Restart node process\n        transport.log('Booting application...');\n        transport.exec('EGG_SERVER_ENV=prod');\n        // transport.exec(`pm2 delete ${application}`);\n        //transport.exec(`pm2 startOrRestart ${join(currentPath)}/ecosystem.json5 --env production`);\n        transport.exec(` npm start`);\n\n        // transport.with(`cd ${join(currentPath)}`, {silent: true}, function() {\n        //     transport.ls('-al'); // 'cd /tmp && ls -al', output suppressed\n        //     transport.exec(`pm2 startOrRestart ${join(currentPath)}/ecosystem.json5 --env production`);\n        //\n        // });\n\n        transport.exec('pwd');\n        //transport.exec(`pm2 desc ${application}`);\n\n        // transport.exec(`NODE_ENV=production forever restart -c nodejs --spinSleepTime 10000 ${join(currentPath, 'index.js')} || NODE_ENV=production forever start -c nodejs --spinSleepTime 10000 ${join(currentPath, 'index.js')}`, { silent: true })\n\n        // 3) Update log\n        transport.exec(`printf \"[%s %s] Branch %s (at %s) deployed as release %s by %s\\n\" $(date '+%Y-%m-%d %H:%M:%S') \"${branch}\" \"${revision}\" \"${releaseTimestamp}\" $(whoami) >> ${deploymentLogPath}`);\n    },\n    cleanup: (transport) => {\n        transport.log('Cleaning up old releases...');\n\n        // 1) Only remove the number of releases specified by keepReleases\n        let fetchReleases = transport.exec(`ls -r ${releasesPath}`, { silent: true });\n        if (fetchReleases.code === 0) {\n            let releases = fetchReleases.stdout.trim().split('\\n').slice(keepReleases);\n            if (releases.length) {\n                transport.log(`Removing ${releases.length} release(s)...`);\n                transport.with(`cd ${releasesPath}`, () => transport.exec(`rm -rf ${releases.join(' ')}`));\n            }\n        }\n    }\n};\n\n// plan.target('production', envs.production)\n\n// plan.remote('deploy', deploy.check)\n// plan.remote('deploy', deploy.createRelease)\n// plan.remote('deploy', deploy.publish)\n// plan.remote('deploy', deploy.cleanup)\n//\n\nfunction sshFix(transport, host) {\n    transport.log('Fixing SSH...');\n    // Forcibly add the remote key to known_hosts:\n    transport.exec(`ssh-keyscan -t rsa,dsa ${host} 2>&1 | sort -u - ~/.ssh/known_hosts > ~/.ssh/tmp_hosts`);\n    transport.exec('mv ~/.ssh/tmp_hosts ~/.ssh/known_hosts');\n}\n/*\n 有几个要提到的要么从dev传递给dev或学习的硬的方式。一旦这样的点是事实，ssh可以有点苛刻，阻止连接时，尝试连接到一个新的主机。ssh将继续等待用户输入，阻止我们美丽的自动部署过程。\n\n 一个小黑客来解决这个问题是在主机上执行一个ssh-键扫描命令，使连接过程不会提示输入：\n */\nplan.local(function(local) {\n    // SSH-fix all endpoints\n    plan.runtime.hosts.forEach(function(endpoint) {\n        sshFix(local, endpoint.host);\n    });\n});\n/*\n 从ssh的这个问题分支是一个事实，Flightplan在transport方法下使用rsync ，当使用更多的自定义形式的交互与ssh（如我们的键盘骗）时，这可能有复杂的问题。为了解决这个问题，你可以使用自己的传输方法\n */\nfunction transfer(transport, hostInfo, localFile, remoteFile) {\n    transport.log(`Transferring package to: ${hostInfo.host}`);\n    transport.exec(`scp ${localFile} ${hostInfo.username}@${hostInfo.host}:${remoteFile}`);\n}\n\n// targets\nplan.target('prod', config.prodHost);\n\nplan.local('git', function(local) {\n    // local.log(\"Copying files...\");\n    // let filesToCopy = local.exec(`find . -type f -follow -print | grep -v \"node_modules\"`, {silent: true});\n    // console.log(filesToCopy)\n    // local.transfer(filesToCopy, \"/tmp/deployment/\");\n    local.log('git push');\n    local.exec('git add .');\n    local.exec('git commit -m  \"abc\"');\n    local.exec('git push');\n});\n\nplan.remote(['deploy'], deploy.check);\nplan.remote(['deploy'], deploy.createRelease);\nplan.remote(['deploy'], deploy.publish);\nplan.remote(['deploy'], deploy.cleanup);\n\n\n\n//\n// plan.remote(['deploy', 'restart'], function(remote) {\n//     remote.log('===========Restart===========');\n//     remote.exec('cd ' + srvDir + 'current && ' + nodePath + 'pm2 start start.sh --interpreter bash -n webapp');\n// });\n\n\nplan.remote(['log'], function(remote) {\n    remote.log('===========Checking Status===========');\n    remote.exec(`pm2 show ${application}`);\n    remote.exec('pm2 logs --timestamp \"HH:mm:ss\"', { exec: { pty: true }});\n\n});\n\nplan.remote(['killlog'], function(remote) {\n    remote.log('===========killing Log===========');\n    remote.exec('kill $(ps aux | grep \\'pm2 logs\\' | awk \\'{print $2}\\')');\n});\n// run tasks locally\n\n// plan.remote( deploy.check)\n\n// // run tasks remotely\n// plan.remote(function(remote) {\n//     remote.log(\"Copying files...\");\n//     remote.exec(\"cp -r /tmp/deployment/* /data/leven \");\n//     remote.log(\"Booting application...\");\n//     remote.exec(\"pm2 start /data/leven/index.js || pm2 restart /data/leven/index.js\");\n// });"]}